#ts is used to create time-series objects
hsales3 <- ts(c(hsales[1:275],hsales[5]+100), end=c(1995,11),
start=c(1973,1),frequency=15)
plot(hsales3,col="purple",lwd=1.5,
main="Modify 'hsales' Data with Outlier",
xlab = "Time", ylab="Monthly Sales")
#STL Decomposition
fit <- stl(hsales,s.window = 5)
plot(fit,color="blue")
plot(hsales,col="gray",main="Hsales",
ylab="Monthly Sales",xlab="Time",
lines(fit$time.series[,2],col="red",ylab="Trend"))
fit <- stl(hsales,s.window = 5)
plot(fit,color="blue")
plot(hsales,col="gray",main="Hsales",
ylab="Monthly Sales",xlab="Time",
lines(fit$time.series[,2],col="red",ylab="Trend"))
plot(hsales,col="gray",main="Hsales",
ylab="Monthly Sales",xlab="Time")
lines(fit$time.series[,2],col="red",ylab="Trend")
plot(hsales,col="gray",main="Seasonal and Trend decomposition using Loess",
ylab="Monthly Sales",xlab="Time")
lines(fit$time.series[,2],col="red",lwd=1.5,ylab="Trend")
plot(fit,color="lightblue")
plot(fit,color="navy")
plot(fit,color="orange2")
plot(fit,color="554")
plot(fit,color=554)
plot(fit,color=#554)
plot(fit,color="#554")
install.packages("RColorBrewer")
library(RColorBrewer)
plot(fit,color=#ffeda0)
plot(fit,color="#ffeda0")
plot(fit)
cols <- brewer.pal(8,"Set3")
plot(fit,color="blue")
plot(fit,col="blue")
#STL Decomposition
fit <- stl(hsales,s.window = 5)
plot(fit,col="blue")
plot(hsales,col="green",main="Seasonal and Trend decomposition using Loess",
ylab="Monthly Sales",xlab="Time")
lines(fit$time.series[,2],col="red",lwd=1.5,ylab="Trend")
plot(hsales,col="black",main="Seasonal and Trend decomposition using Loess",
ylab="Monthly Sales",xlab="Time")
lines(fit$time.series[,2],col="red",lwd=1.5,ylab="Trend")
plot(hsales,col="blue",main="Seasonal and Trend decomposition using Loess",
ylab="Monthly Sales",xlab="Time")
lines(fit$time.series[,2],col="red",lwd=1.5,ylab="Trend")
plot(hsales,col="green3",main="Seasonal and Trend decomposition using Loess",
ylab="Monthly Sales",xlab="Time")
lines(fit$time.series[,2],col="red",lwd=1.5,ylab="Trend")
plot(hsales,col="green3",main="Seasonal and Trend decomposition using Loess",
ylab="Monthly Sales",xlab="Time")
lines(fit$time.series[,2],col="red",lwd=2,ylab="Trend")
plot(hsales,col="green3",main="Seasonal and Trend \n decomposition using Loess",
ylab="Monthly Sales",xlab="Time")
lines(fit$time.series[,2],col="red",lwd=2,ylab="Trend")
plot(hsales, col="red", lwd=1.5, ylab = "Monthly Sales", xlab="Date",
main="Monthly Sales of \n 1-Family Houses in USA since 1973")
---
title: "Live Unit 11 Assignment"
author: "Trace Smith"
date: "11/17/2016"
output: html_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
a) Plot the time series. Can you identify seasonal fluctuations and/or a trend?
```{r}
#plot the monthly sales of homes:
plot(hsales, col="red", lwd=1.5, ylab = "Monthly Sales", xlab="Date",
main="Monthly Sales of \n 1-Family Houses in USA since 1973")
```
b) Use a classical decomposition to calculate the trend-cycle and seasonal indices.
```{r}
#Decompose a time series into seasonal, trend and irregular
#components using moving averages.
data <- decompose(hsales)
```
```{r}
# Plot the estimated trend, seasonal, and irregular components
plot(data, col="orange")
```
c) Do the results support the graphical interpretation from part (a)?
d) Compute and plot the seasonally adjusted data.
```{r}
#Plot the seasonlly adjusted data:
adj_sales <- seasadj(data)
plot(adj_sales, col="blue", lwd=1.5, ylab = "Monthly Sales", xlab="Date",
main="Monthly Sales of \n 1-Family Houses in USA since 1973")
```
e) Change one observation to be an outlier (e.g., add 500 to one observation), and recompute the seasonally adjusted data. What is the effect of the outlier?
```{r}
#add outlier to data
#ts is used to create time-series objects
hsales3 <- ts(c(hsales[1:275],hsales[5]+100), end=c(1995,11),
start=c(1973,1),frequency=15)
```
```{r}
plot(hsales3,col="purple",lwd=1.5,
main="Modify 'hsales' Data with Outlier",
xlab = "Time", ylab="Monthly Sales")
```
```{r}
adj_sales3 <- seasadj(hsales3)
plot(adj_sales3, col="lightblue", lwd=1.5, ylab = "Monthly Sales", xlab="Date",
main="Monthly Sales of \n 1-Family Houses in USA since 1973")
```
f) Does it make any difference if the outlier is near the end rather than in the middle of the time series?
g) Now use STL to decompose the series.
```{r}
#STL Decomposition
fit <- stl(hsales,s.window = 5)
plot(fit,col="blue")
plot(hsales,col="green3",main="Seasonal and Trend \n Decomposition using Loess",
ylab="Monthly Sales",xlab="Time")
lines(fit$time.series[,2],col="red",lwd=2,ylab="Trend"
```
adj_sales <- seasadj(data)
plot(adj_sales, col="blue", lwd=1.5, ylab = "Monthly Sales", xlab="Date",
main="Monthly Sales of \n 1-Family Houses in USA since 1973")
adj_sales3 <- seasadj(hsales3)
plot(adj_sales3, col="lightblue", lwd=1.5, ylab = "Monthly Sales", xlab="Date",
main="Monthly Sales of \n 1-Family Houses in USA since 1973")
```{r}
adj_sales3 <- seasadj(hsales3)
plot(adj_sales3, col="blue", lwd=1.5, ylab = "Monthly Sales", xlab="Date",
main="Monthly Sales of \n 1-Family Houses in USA since 1973")
```
adj_sales3 <- seasadj(hsales3)
library("fpp")
adj_sales3 <- seasadj(hsales3)
adj_sales3 <- seasadj(hsales3)
data3 <- decompose(hsales3)
adj_sales3 <- seasadj(data3)
plot(adj_sales3, col="blue", lwd=1.5, ylab = "Monthly Sales", xlab="Date",
main="Monthly Sales of \n 1-Family Houses in USA since 1973")
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
library("fpp")
plot(hsales, col="red", lwd=1.5, ylab = "Monthly Sales", xlab="Date",
main="Monthly Sales of \n 1-Family Houses in USA since 1973")
data <- decompose(hsales)
adj_sales <- seasadj(data)
plot(adj_sales, col="blue", lwd=1.5, ylab = "Monthly Sales", xlab="Date",
main="Monthly Sales of \n 1-Family Houses in USA since 1973")
fit <- stl(hsales, s.window=5)
plot(fit, main="Seasonal Adjusted Data",col="blue")
plot(hsales, col="gray", lnd=1.5,
main="Sales of US Single Family Housing\nwith Seasonal Adjusted Data(red line)",
ylab="New Single Family House Sales", xlab="Years")
lines(fit$time.series[,2],col="red",ylab="Trend",lnd=1.5)
plot(hsales, col="gray", lnd=1.5,
main="Sales of US Single Family Housing\nwith Seasonal Adjusted Data(red line)",
ylab="New Single Family House Sales", xlab="Years")
lines(fit$time.series[,2],col="red",ylab="Trend")
plot(hsales, col="gray",lnd=1.5, main="Sales of US Single Family Housing\nwith Seasonal Adjusted Data(red line)", ylab="New Single Family House Sales", xlab="Years")
lines(fit$time.series[,2],col="red",ylab="Trend")
plot(hsales, col="gray", main="Sales of US Single Family Housing\nwith Seasonal Adjusted Data(red line)", ylab="New Single Family House Sales", xlab="Years")
lines(fit$time.series[,2],col="red",ylab="Trend")
plot(hsales, col="gray", main="Sales of US Single Family Housing\nwith Seasonal Adjusted Data(red line)", ylab="New Single Family House Sales", xlab="Years")
plot(hsales, col="gray", main="Sales of US Single Family Housing\nwith Seasonal Adjusted Data(red line)", ylab="New Single Family House Sales", xlab="Years")
lines(fit$time.series[,2],col="red",ylab="Trend")
lines(fit$time.series[,2],col="red",ylab="Trend")
lines(fit$time.series[,2],col="red",ylab="Trend",lwd=1.5)
plot(hsales, col="gray", main="Sales of US Single Family Housing\nwith Seasonal Adjusted Data(red line)", ylab="New Single Family House Sales", xlab="Years")
lines(fit$time.series[,2],col="red",ylab="Trend",lwd=1.5)
plot(hsales, col="gray", main="Sales of US Single Family Housing\nwith Seasonal Adjusted Data(red line)", ylab="New Single Family House Sales", xlab="Years")
lines(fit$time.series[,2],col="red",ylab="Trend",lwd=3.5)
plot(hsales, col="gray",lwd=2, main="Sales of US Single Family Housing\nwith Seasonal Adjusted Data(red line)", ylab="New Single Family House Sales", xlab="Years")
lines(fit$time.series[,2],col="red",ylab="Trend",lwd=2.5)
#ts is used to create time-series objects
hsales3 <- ts(c(hsales[1:275],hsales[5]+100), end=c(1995,11),
start=c(1973,1),frequency=15)
plot(hsales3,col="purple",lwd=1.5,
main="Modify 'hsales' Data with Outlier",
xlab = "Time", ylab="Monthly Sales")
# Live Unit 11 Assignment
# Live Unit 11 Assignment
library("fpp")
##a.) Plot the time series. Can you identify seasonal fluctuations and/or a trend?
#plot the monthly sales of homes:
plot(hsales, col="red", lwd=1.5, ylab = "Monthly Sales", xlab="Date",
main="Monthly Sales of \n 1-Family Houses in USA since 1973")
##b.) Use a classical decomposition to calculate the trend-cycle and seasonal indices.
#Decompose a time series into seasonal, trend and irregular
#components using moving averages.
data <- decompose(hsales)
# Plot the estimated trend, seasonal, and irregular components
plot(data, col="blue")
##d) Compute and plot the seasonally adjusted data.
#Decompose a time series into seasonal, trend and irregular components using:
#Returns seasonally adjusted data constructed by removing the seasonal component.
fit <- stl(hsales, s.window=5)
plot(fit, main="Seasonal Adjusted Data",col="blue")
#Plot of hsales with the seasonal adjusted data (red line):
plot(hsales, col="gray",lwd=2, main="Sales of US Single Family Housing\n
with Seasonal Adjusted Data (red line)", ylab="New Single Family House Sales", xlab="Years")
lines(fit$time.series[,2],col="red",ylab="Trend",lwd=2.5)
##e) Change one observation to be an outlier (e.g., add 500 to one observation),
#and recompute the seasonally adjusted data. What is the effect of the outlier?
#add outlier to data
#ts is used to create time-series objects
hsales3 <- ts(c(hsales[1:275],hsales[5]+100), end=c(1995,11),
start=c(1973,1),frequency=15)
plot(hsales3,col="purple",lwd=1.5,
main="Modify 'hsales' Data with Outlier",
xlab = "Time", ylab="Monthly Sales")
##f) Does it make any difference if the outlier is near the end rather than in the middle of
#the time series?
#Step 1: Create an outlier near the end:
hsales4 <- ts(c(hsales[1:260],hsales[261]+500, hsales[262:275]),start=c(1973,1),frequency=12)
#Plot the time series:
plot(hsales4, col="orange",main="Sales of US One Family Housing\n(Outlier Close to End)",
ylab="New Single Family House Sales", xlab="Years")
##g) Now use STL to decompose the series.
#Step G-1: Plot Seasonal Adjusted Data with Outlier at End:
fit4 <- stl(hsales4, s.window=5)
plot(fit4, col="blue",main="Seasonal Adjusted Data\n(Outlier Close to End)")
#Plot of hsales3 with the seasonal adjusted data(purple line), fit3
plot(hsales4, col="gray",lwd=2,main="Sales of US Single Family Housing(Outlier Clost to End)
\nwith Seasonal Adjusted Data (purple line)",
ylab="New Single Family House Sales", xlab="Years")
lines(fit4$time.series[,2],col="purple",ylab="Trend",lwd=2.5)
b <- matrix(c(4,5,1,2,1,0,3,8,2,1,8,2),nrow=3,ncol=4)
print(b)
df <- data.frame(Orange)
View(df)
str(df$Tree)
str(df$age)
srt(df$circumference)
str(df$circumference)
circum.mean <- aggregate(df[c("circumference")],by=list(df$Tree),fun=mean)
circum.mean <- aggregate(df[c("circumference")],by=list(df$Tree),FUN=mean)
circum.mean <- aggregate(df$circumference,by=list(df$Tree),FUN=mean)
circum.mean
colnames(circum.mean) <- c("Tree","Circumference")
circum.mean
knitr:kable(circum.mean)
knit:kable(circum.mean)
knitr:kable(circum.mean)
knitr::kable(circum.mean)
colnames(circum.mean) <- c("Tree","Avg Circumference")
knitr::kable(circum.mean)
circum.median <- aggregate(df$circumference,by=list(df$Tree),FUN=median)
colnames(circum.median) <- c("Tree","Avg Circumference")
knitr::kable(circum.median)
circum.median <- aggregate(df$circumference,by=list(df$Tree),FUN=median)
colnames(circum.median) <- c("Tree","Med. Circumference")
knitr::kable(circum.median)
circum.mean <- circum.mean[sort(Tree,decreasing=FALSE)]
circum.mean <- circum.mean[sort(circum.mean$Tree,decreasing=FALSE)]
circum.mean <- aggregate(df$circumference,by=list(df$Tree),FUN=mean)
circum.mean <- circum.mean[sort(circum.mean$Tree,decreasing=FALSE)]
typeof(circum.mean)
circum.mean <- sort(circum.mean,decreasing=FALSE)
colnames(circum.mean) <- c("Tree","Avg Circumference")
circum.mean <- sort(circum.mean,decreasing=FALSE)
knitr::kable(circum.mean)
circum.mean
circum.mean <- aggregate(df$circumference,by=list(df$Tree),FUN=mean)
str(cicum.mean)
str(circum.mean)
circum.mean <- circum.mean[sort("Tree",decreasing=FALSE)]
circum.mean <- circum.mean[sort(circum.mean[c("Tree")],decreasing=FALSE)]
circum.mean <- sort(circum.mean[c("Tree")],decreasing=FALSE)
circum.mean <- circum.mean[order("Tree"),]
circum.mean
circum.mean <- aggregate(df$circumference,by=list(df$Tree),FUN=mean)
circum.mean <- circum.mean[order("Tree"),]
circum.mean
circum.mean <- circum.mean[order(Tree),]
circum.mean <- circum.mean[order(circum.mean$Tree),]
circum.mean <- circum.mean[order(circum.mean$Tree)]
circum.mean <- circum.mean[order(Tree)]
circum.mean <- circum.mean[order("Tree")]
circum.mean
circum.mean <- aggregate(df$circumference,by=list(df$Tree),FUN=mean)
colnames(circum.mean) <- c("Tree","Avg Circumference")
knitr::kable(circum.mean)
circum.median <- aggregate(df$circumference,by=list(df$Tree),FUN=median)
typeof(circum.mean)
colnames(circum.median) <- c("Tree","Med. Circumference")
knitr::kable(circum.median)
p <- ggplot(df) + geom_point(aes(x=df$circumference,y=df$age,colour=df$Tree))
library(ggplot2)
p <- ggplot(df) + geom_point(aes(x=df$circumference,y=df$age,colour=df$Tree))
p
p <- ggplot(df) + geom_point(aes(y=df$circumference,x=df$age,colour=df$Tree))
p
p + labs(title="Age vs Circumference by Tree" + xlab="Age",ylab="Circumference")
p + labs(title="Age vs Circumference by Tree",xlab="Age",ylab="Circumference")
p + labs(title="Age vs Circumference by Tree",x="Age",y="Circumference")
colour="Tree")
p + labs(title="Age vs Circumference by Tree",x="Age",y="Circumference",
colour="Tree")
p <- ggplot(df) + geom_point(aes(y=df$circumference,x=df$age,colour=df$Tree)) +
geom_line(colour=df$Tree)
p + labs(title="Age vs Circumference by Tree",x="Age",y="Circumference",
colour="Tree")
p <- ggplot(df) + geom_point(aes(y=df$circumference,x=df$age,colour=df$Tree)) +
geom_line()
p + labs(title="Age vs Circumference by Tree",x="Age",y="Circumference",
colour="Tree")
p <- ggplot(df) + geom_point(aes(y=df$circumference,x=df$age,colour=df$Tree))
p + labs(title="Age vs Circumference by Tree",x="Age",y="Circumference",
colour="Tree")
library(ggplot2)
p <- ggplot(df,aes(y=df$circumference,x=df$age,colour=df$Tree)) + geom_point()
p + labs(title="Age vs Circumference by Tree",x="Age",y="Circumference",
colour="Tree")
se different plotting symbols for different size of trees.**
library(ggplot2)
p <- ggplot(df,aes(y=df$circumference,x=df$age,colour=df$Tree)) + geom_point() +
geo_line()
p + labs(title="Age vs Circumference by Tree",x="Age",y="Circumference",
colour="Tree")
p <- ggplot(df,aes(y=df$circumference,x=df$age,colour=df$Tree)) + geom_point() +
geom_line()
p + labs(title="Age vs Circumference by Tree",x="Age",y="Circumference",
colour="Tree")
p <- ggplot(df,aes(y=df$circumference,x=df$age,colour=df$Tree)) + geom_point() +
geom_line(size=2)
p + labs(title="Age vs Circumference by Tree",x="Age",y="Circumference",
colour="Tree")
p <- ggplot(df,aes(y=df$circumference,x=df$age,colour=df$Tree)) + geom_point() +
geom_line(size=1)
p + labs(title="Age vs Circumference by Tree",x="Age",y="Circumference",
colour="Tree")
p <- ggplot(df,aes(x=df$circumference,y=df$age,colour=df$Tree)) + geom_point() +
geom_line(size=1)
p + labs(title="Age vs Circumference by Tree",x="Age",y="Circumference",
colour="Tree")
library(ggplot2)
p <- ggplot(df,aes(y=df$circumference,x=df$age,colour=df$Tree)) + geom_point() +
geom_line(size=1)
p + labs(title="Age vs Circumference by Tree",x="Age",y="Circumference",
colour="Tree")
p <- ggplot(df,aes(y=df$circumference,x=df$age,colour=df$Tree)) + geom_point() +
geom_line(size=1,alpha=0.5)
p + labs(title="Age vs Circumference by Tree",x="Age",y="Circumference",
colour="Tree")
p <- ggplot(df,aes(y=df$circumference,x=df$age,colour=factor(df$Tree))) + geom_point() +
geom_line(size=1,alpha=0.5)
p + labs(title="Age vs Circumference by Tree",x="Age",y="Circumference",
colour="Tree")
p <- ggplot(df,aes(y=df$circumference,x=df$age,colour='factor(df$Tree))') + geom_point() +
geom_line(size=1,alpha=0.5)
p + labs(title="Age vs Circumference by Tree",x="Age",y="Circumference",
colour="Tree")
library(ggplot2)
p <- ggplot(df,aes(y=df$circumference,x=df$age,colour=df$Tree)) + geom_point() +
geom_line(size=1,alpha=0.8)
p + labs(title="Age vs Circumference by Tree",x="Age",y="Circumference",
colour="Tree")
p <- ggplot(df,aes(y=df$circumference,x=df$age,colour=df$Tree)) + geom_point() +
geom_line(size=1,alpha=0.8) + scale_colour_gradient(low="red")
p + labs(title="Age vs Circumference by Tree",x="Age",y="Circumference",
colour="Tree")
p <- ggplot(df,aes(y=df$circumference,x=df$age,colour=df$Tree)) + geom_point() +
geom_line(size=1,alpha=0.8) + scale_colour_gradient()
p + labs(title="Age vs Circumference by Tree",x="Age",y="Circumference",
colour="Tree")
p <- ggplot(df,aes(y=df$circumference,x=df$age,colour=df$Tree)) + geom_point() +
geom_line(size=1,alpha=0.8) + scale_colour_gradientn(colours=rainbow(4))
p + labs(title="Age vs Circumference by Tree",x="Age",y="Circumference",
colour="Tree")
p <- ggplot(df,aes(y=df$circumference,x=df$age,colour=df$Tree)) + geom_point() +
geom_line(size=1,alpha=0.8, colours=rainbow)
p + labs(title="Age vs Circumference by Tree",x="Age",y="Circumference",
colour="Tree")
df$Tree <- as.numeric(levels(df$Tree))
df$Tree <- as.numeric(levels(df$Tree))
p <- ggplot(df,aes(y=df$circumference,x=df$age,colour=df$Tree)) + geom_point() +
geom_line(size=1,alpha=0.8) + scale_colour_gradientn(colours=rainbow(4))
p + labs(title="Age vs Circumference by Tree",x="Age",y="Circumference",
colour="Tree")
df <- data.frame(Orange)
p <- ggplot(df,aes(y=df$circumference,x=df$age,colour=df$Tree)) + geom_point() +
geom_line(size=1,alpha=0.8) scale_colour_hue()
p + labs(title="Age vs Circumference by Tree",x="Age",y="Circumference",
colour="Tree")
p <- ggplot(df,aes(y=df$circumference,x=df$age,colour=df$Tree)) + geom_point() +
geom_line(size=1,alpha=0.8) + scale_colour_hue()
p + labs(title="Age vs Circumference by Tree",x="Age",y="Circumference",
colour="Tree")
p <- ggplot(df,aes(y=df$circumference,x=df$age,colour=df$Tree)) + geom_point() +
geom_line(size=1,alpha=0.8) + scale_colour_hue(h=c(180, 270))
p + labs(title="Age vs Circumference by Tree",x="Age",y="Circumference",
colour="Tree")
p <- ggplot(df,aes(y=df$circumference,x=df$age,colour=df$Tree)) + geom_point()
+ scale_colour_hue(h=c(180, 270))
p + labs(title="Scatter Plot \n Age vs Circumference by Tree",x="Age",y="Circumference",
colour="Tree")
p <- ggplot(df,aes(y=df$circumference,x=df$age,colour=df$Tree)) + geom_point() +
geom_line(size=1,alpha=0.8) + scale_colour_hue(h=c(180, 270))
p + labs(title="Line Plot: \n Age vs Circumference by Tree",x="Age",y="Circumference",
colour="Tree")
p <- ggplot(df) + geom_point(aes(y=df$circumference,x=df$age,colour=df$Tree)) +
scale_colour_hue(h=c(180, 270))
p + labs(title="Scatter Plot \n Age vs Circumference by Tree",x="Age",y="Circumference",
colour="Tree")
p <- ggplot(df) + geom_point(aes(y=df$circumference,x=df$age,colour=df$Tree)) +
scale_colour_hue(l=80, c=150)
p + labs(title="Scatter Plot \n Age vs Circumference by Tree",x="Age",y="Circumference",
colour="Tree")
p <- ggplot(df,aes(y=df$circumference,x=df$age,colour=df$Tree)) + geom_point() +
geom_line(size=1,alpha=0.8) + scale_colour_hue(h=c(180, 270))
p + labs(title="Line Plot: \n Age vs Circumference by Tree",x="Age",y="Circumference",
colour="Tree")
p<-ggplot(df,aes(x=Tree,y=circumference))+ geom_boxplot(aes(fill=Tree))
p
df<- df[order(df$Tree,df$circumference),]
df
p<-ggplot(df,aes(x=Tree,y=circumference))+ geom_boxplot(aes(fill=Tree))
p
circum.max <- aggregate(df$circumference,by=list(df$Tree),FUN=max)
colnames(circum.max) <- c("Tree","Max Circum.")
knitr::kable(circum.max)
factor(df$Tree,c("3","1","5","2","4"))
p<-ggplot(df,aes(x=Tree,y=circumference))+ geom_boxplot(aes(fill=Tree))
p
p + labs(title="Box Plot: Trunk Circumference", y=Circumference,x=Tree)
p + labs(title="Box Plot: Trunk Circumference", y="Circumference",x="Tree")
library(ggplot2)
library(ggplot2)
#Read in Orange dataset from R into data.frame
df <- data.frame(Orange)
#get summary of Orange dataset
summary(df)
#get structure of each columns
str(df$Tree)
str(df$age)
str(df$circumference)
#Calculate the mean and the median of the trunk
#circumferences for different size of the trees. (Tree)
#aggregate data.frame by Tree and compute mean circumference
circum.mean <- aggregate(df$circumference,by=list(df$Tree),FUN=mean)
colnames(circum.mean) <- c("Tree","Avg Circumference")
knitr::kable(circum.mean)
#aggregate data.frame by Tree and compute median circumference
circum.median <- aggregate(df$circumference,by=list(df$Tree),FUN=median)
colnames(circum.median) <- c("Tree","Med. Circumference")
knitr::kable(circum.median)
#Make a scatter plot of the trunk circumferences against the age of the tree.
#Use different plotting symbols for different size of trees.**
p <- ggplot(df) + geom_point(aes(y=df$circumference,x=df$age,colour=df$Tree)) +
scale_colour_hue(l=80, c=150)
p + labs(title="Scatter Plot \n Age vs Circumference by Tree",x="Age",y="Circumference",
colour="Tree")
p <- ggplot(df,aes(y=df$circumference,x=df$age,colour=df$Tree)) + geom_point() +
geom_line(size=1,alpha=0.8) + scale_colour_hue(h=c(180, 270))
p + labs(title="Line Plot: \n Age vs Circumference by Tree",x="Age",y="Circumference",
colour="Tree")
#Display the trunk circumferences on a comparative boxplot against tree. Be sure you
#order the boxplots in the increasing order of maximum diameter.
circum.max <- aggregate(df$circumference,by=list(df$Tree),FUN=max)#aggregate for max circum
colnames(circum.max) <- c("Tree","Max Circum.") #rename columns
knitr::kable(circum.max) #knit table
factor(df$Tree,c("3","1","5","2","4")) #reorder the boxplot for max circum. by tree
p<-ggplot(df,aes(x=Tree,y=circumference))+ geom_boxplot(aes(fill=Tree))# ggplot: boxplot
p + labs(title="Box Plot: Trunk Circumference", y="Circumference",x="Tree")
summary(df)
library(ggmap)
usa_center = as.numeric(geocode("United States"))
library(ggplot2)
library(gmap)
usa_center = as.numeric(geocode("United States"))
library(ggplot2)
library(gmap)
usa_center = as.numeric(geocode("United States"))
usa_center
library(ggplot2)
library(gmap)
usa_center = as.numeric(geocode("United States"))
USAMap = ggmap(get_googlemap(center=usa_center, scale=2, zoom=4), extent="normal")
SAMap + geom_point(aes(x=lon, y=lat), data=mv_num_collisions, col="orange", alpha=0.4, size=mv_num_collisions$collisions*circle_scale_amt) +
scale_size_continuous(range=range(mv_num_collisions$collisions))
USAMap + geom_point(aes(x=lon, y=lat), data=mv_num_collisions, col="orange", alpha=0.4, size=mv_num_collisions$collisions*circle_scale_amt) +
scale_size_continuous(range=range(mv_num_collisions$collisions))
install.packages('maps','/Users/yourusernamehere/anaconda/lib/R/library')
install.packages("maps", "/Users/yourusernamehere/anaconda/lib/R/library")
install.packages("maps", "/Users/yourusernamehere/anaconda/lib/R/library")
install.packages("maps", "/Users/yourusernamehere/anaconda/lib/R/library")
install.packages("maps", "/Users/yourusernamehere/anaconda/lib/R/library")
install.packages("maps", "/Users/yourusernamehere/anaconda/lib/R/library")
install.packages('maps','/Users/tracesmith/anaconda/lib/R/library')
install.packages('rworldmap','/Users/tracesmith/anaconda/lib/R/library')
install.packages('rworldmap','/Users/tracesmith/anaconda/lib/R/library')
install.packages('foreign','/Users/tracesmith/anaconda/lib/R/library')
install.packages('ggmap','/Users/tracesmith/anaconda/lib/R/library')
install.packages('mapproj','/Users/tracesmith/anaconda/lib/R/library')
print("Hello")
install.packages("knirt")
install.packages("knitr")
install.packages("ggplot2")
install.packages(c('repr', 'IRdisplay', 'evaluate', 'crayon', 'pbdZMQ', 'devtools', 'uuid', 'digest'))
devtools::install_github('IRkernel/IRkernel')
IRkernel::installspec()
install.packages('maps','/Users/tracesmith/anaconda/lib/R/library')
install.packages('dplyr','/Users/tracesmith/anaconda/lib/R/library')
install.packages(c('repr', 'IRdisplay', 'evaluate', 'crayon', 'pbdZMQ', 'devtools', 'uuid', 'digest'),'/Users/tracesmith/anaconda/lib/R/library')
install.packages(c('repr', 'IRdisplay', 'evaluate', 'crayon', 'pbdZMQ', 'devtools', 'uuid', 'digest'),'/Users/tracesmith/anaconda/lib/R/library')
print("Hello")
install.packages('devtools','/Users/tracesmith/anaconda/lib/R/library')
setwd(".")
getwd()
swetwd("/Users/tracesmith/Desktop/Case-Study-II-share")
setwd("/Users/tracesmith/Desktop/Case-Study-II-share")
